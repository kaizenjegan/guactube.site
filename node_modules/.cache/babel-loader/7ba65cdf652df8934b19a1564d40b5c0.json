{"ast":null,"code":"import { Auth } from '../utils/Auth';\n\nconst axios = require('axios'); // import { }\n// const { }\n\n\nexport const GuacService = () => {\n  // login = (username, password) => {\n  // }\n  return {\n    getMovies: async () => {\n      let m = [{\n        \"name\": \"first moviex\"\n      }, {\n        \"name\": \"second moviex\"\n      }];\n      let promiseToMovies = new Promise((resolve, reject) => {\n        //TODO: put in config file\n        //\n        axios.get(`http://www.mocky.io/v2/5dede045330000590098425b`).then(response => {\n          // console.log(response.data.token);\n          console.log(response.data);\n          resolve(response.data);\n        }).catch(error => {\n          // handle error\n          console.log(error); //telemetry\n        }).finally(() => {\n          // resolve('cool');\n          resolve(m);\n        });\n      });\n      let token = await promiseToMovies; // wait until the promise resolves (*)\n\n      return token;\n    },\n    login: async (username, password) => {\n      let promiseToLogin = new Promise((resolve, reject) => {\n        setTimeout(() => {\n          Auth.setAuth('sometoken');\n          resolve(true);\n        }, 3000);\n      });\n      let loginPromise = await promiseToLogin;\n      return loginPromise;\n    },\n    logout: async () => {\n      console.log('logged out clicked');\n      let promiseToLogout = new Promise((resolve, reject) => {\n        setTimeout(() => {\n          Auth.logout();\n          resolve(true);\n        }, 3000);\n      });\n      let logoutPromise = await promiseToLogout;\n      return logoutPromise;\n    }\n  };\n};","map":{"version":3,"sources":["/Users/jeganmatthews/softwareProjects/guactube2/app/ui/src/api/guac.service.tsx"],"names":["Auth","axios","require","GuacService","getMovies","m","promiseToMovies","Promise","resolve","reject","get","then","response","console","log","data","catch","error","finally","token","login","username","password","promiseToLogin","setTimeout","setAuth","loginPromise","logout","promiseToLogout","logoutPromise"],"mappings":"AACA,SAAQA,IAAR,QAAmB,eAAnB;;AACA,MAAMC,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB,C,CACA;AACA;;;AAEA,OAAO,MAAMC,WAAW,GAAG,MAAM;AAC/B;AAEA;AAEA,SAAO;AACLC,IAAAA,SAAS,EAAE,YAAY;AAErB,UAAIC,CAAC,GAAG,CACN;AACE,gBAAQ;AADV,OADM,EAIN;AACE,gBAAQ;AADV,OAJM,CAAR;AAQA,UAAIC,eAAe,GAAG,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACrD;AACA;AACAR,QAAAA,KAAK,CAACS,GAAN,CAAW,iDAAX,EACGC,IADH,CACSC,QAAD,IAAmB;AACvB;AACAC,UAAAA,OAAO,CAACC,GAAR,CAAYF,QAAQ,CAACG,IAArB;AACAP,UAAAA,OAAO,CAACI,QAAQ,CAACG,IAAV,CAAP;AACD,SALH,EAMGC,KANH,CAMUC,KAAD,IAAgB;AACrB;AACAJ,UAAAA,OAAO,CAACC,GAAR,CAAYG,KAAZ,EAFqB,CAED;AACrB,SATH,EASKC,OATL,CASa,MAAM;AACf;AACAV,UAAAA,OAAO,CAACH,CAAD,CAAP;AACD,SAZH;AAaD,OAhBqB,CAAtB;AAkBA,UAAIc,KAAK,GAAG,MAAMb,eAAlB,CA5BqB,CA4Bc;;AACnC,aAAOa,KAAP;AACD,KA/BI;AAgCLC,IAAAA,KAAK,EAAE,OAAOC,QAAP,EAAwBC,QAAxB,KAA4C;AACjD,UAAIC,cAAc,GAAG,IAAIhB,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpDe,QAAAA,UAAU,CAAC,MAAM;AACfxB,UAAAA,IAAI,CAACyB,OAAL,CAAa,WAAb;AACAjB,UAAAA,OAAO,CAAC,IAAD,CAAP;AACD,SAHS,EAGP,IAHO,CAAV;AAID,OALoB,CAArB;AAOA,UAAIkB,YAAY,GAAG,MAAMH,cAAzB;AACA,aAAOG,YAAP;AACD,KA1CI;AA4CLC,IAAAA,MAAM,EAAE,YAAY;AAClBd,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AAEA,UAAIc,eAAe,GAAG,IAAIrB,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACrDe,QAAAA,UAAU,CAAC,MAAM;AACfxB,UAAAA,IAAI,CAAC2B,MAAL;AACAnB,UAAAA,OAAO,CAAC,IAAD,CAAP;AACD,SAHS,EAGP,IAHO,CAAV;AAID,OALqB,CAAtB;AAMA,UAAIqB,aAAa,GAAG,MAAMD,eAA1B;AACA,aAAOC,aAAP;AACD;AAvDI,GAAP;AAyDD,CA9DM","sourcesContent":["import { async } from \"q\";\nimport {Auth} from '../utils/Auth'\nconst axios = require('axios');\n// import { }\n// const { }\n\nexport const GuacService = () => {\n  // login = (username, password) => {\n\n  // }\n\n  return {\n    getMovies: async () => {\n\n      let m = [\n        {\n          \"name\": \"first moviex\"\n        },\n        {\n          \"name\": \"second moviex\"\n        }\n      ];\n      let promiseToMovies = new Promise((resolve, reject) => {\n        //TODO: put in config file\n        //\n        axios.get(`http://www.mocky.io/v2/5dede045330000590098425b`)\n          .then((response: any) => {\n            // console.log(response.data.token);\n            console.log(response.data)\n            resolve(response.data);\n          })\n          .catch((error: any) => {\n            // handle error\n            console.log(error); //telemetry\n          }).finally(() => {\n            // resolve('cool');\n            resolve(m);\n          })\n      });\n\n      let token = await promiseToMovies; // wait until the promise resolves (*)\n      return token;\n    },\n    login: async (username:String, password:String) => {\n      let promiseToLogin = new Promise((resolve, reject) => {\n        setTimeout(() => {\n          Auth.setAuth('sometoken')\n          resolve(true);\n        }, 3000);\n      });\n\n      let loginPromise = await promiseToLogin;\n      return loginPromise;\n    },\n\n    logout: async () => {\n      console.log('logged out clicked');\n\n      let promiseToLogout = new Promise((resolve, reject) => {\n        setTimeout(() => {\n          Auth.logout();\n          resolve(true);\n        }, 3000);\n      });\n      let logoutPromise = await promiseToLogout;\n      return logoutPromise;\n    }\n  }\n}"]},"metadata":{},"sourceType":"module"}