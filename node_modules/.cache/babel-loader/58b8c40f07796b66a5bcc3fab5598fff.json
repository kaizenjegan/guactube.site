{"ast":null,"code":"import { Auth } from '../utils/Auth';\n\nconst axios = require('axios'); // import { }\n// const { }\n\n\nexport const GuacService = () => {\n  // login = (username, password) => {\n  // }\n  return {\n    getMovies: async () => {\n      let movies = [{\n        \"name\": \"Rick & Morty S4e02: The Old Man and the Seat\"\n      }, {\n        \"name\": \"Rick & Morty S4e03: One Crew over the Crewcoo's Morty\"\n      }];\n      let promiseToMovies = new Promise((resolve, reject) => {\n        //TODO: put in config file\n        //\n        // axios.get(`http://www.mocky.io/v2/5dede045330000590098425b`)\n        //   .then((response: any) => {\n        //     // console.log(response.data.token);\n        //     console.log(response.data)\n        //     resolve(response.data);\n        //   })\n        //   .catch((error: any) => {\n        //     // handle error\n        //     console.log(error); //telemetry\n        //   }).finally(() => {\n        //     // resolve('cool');\n        //     resolve(m);\n        //   })\n        setTimeout(() => {\n          resolve(movies);\n        }, 2000);\n      });\n      let token = await promiseToMovies; // wait until the promise resolves (*)\n\n      return token;\n    },\n    login: async (username, password) => {\n      let promiseToLogin = new Promise((resolve, reject) => {\n        setTimeout(() => {\n          Auth.setAuth('sometoken');\n          resolve(true);\n        }, 3000);\n      });\n      let loginPromise = await promiseToLogin;\n      return loginPromise;\n    },\n    logout: async () => {\n      console.log('logged out clicked');\n      let promiseToLogout = new Promise((resolve, reject) => {\n        setTimeout(() => {\n          Auth.logout();\n          resolve(true);\n        }, 3000);\n      });\n      let logoutPromise = await promiseToLogout;\n      return logoutPromise;\n    }\n  };\n};","map":{"version":3,"sources":["/Users/jeganmatthews/softwareProjects/guactube2/app/ui/src/api/guac.service.tsx"],"names":["Auth","axios","require","GuacService","getMovies","movies","promiseToMovies","Promise","resolve","reject","setTimeout","token","login","username","password","promiseToLogin","setAuth","loginPromise","logout","console","log","promiseToLogout","logoutPromise"],"mappings":"AACA,SAASA,IAAT,QAAqB,eAArB;;AACA,MAAMC,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB,C,CACA;AACA;;;AAEA,OAAO,MAAMC,WAAW,GAAG,MAAM;AAC/B;AAEA;AAEA,SAAO;AACLC,IAAAA,SAAS,EAAE,YAAY;AAErB,UAAIC,MAAM,GAAG,CACX;AACE,gBAAQ;AADV,OADW,EAIX;AACE,gBAAQ;AADV,OAJW,CAAb;AAQA,UAAIC,eAAe,GAAG,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEAC,QAAAA,UAAU,CAAC,MAAM;AACfF,UAAAA,OAAO,CAACH,MAAD,CAAP;AACD,SAFS,EAEP,IAFO,CAAV;AAGD,OApBqB,CAAtB;AAsBA,UAAIM,KAAK,GAAG,MAAML,eAAlB,CAhCqB,CAgCc;;AACnC,aAAOK,KAAP;AACD,KAnCI;AAoCLC,IAAAA,KAAK,EAAE,OAAOC,QAAP,EAAyBC,QAAzB,KAA8C;AACnD,UAAIC,cAAc,GAAG,IAAIR,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpDC,QAAAA,UAAU,CAAC,MAAM;AACfV,UAAAA,IAAI,CAACgB,OAAL,CAAa,WAAb;AACAR,UAAAA,OAAO,CAAC,IAAD,CAAP;AACD,SAHS,EAGP,IAHO,CAAV;AAID,OALoB,CAArB;AAOA,UAAIS,YAAY,GAAG,MAAMF,cAAzB;AACA,aAAOE,YAAP;AACD,KA9CI;AAgDLC,IAAAA,MAAM,EAAE,YAAY;AAClBC,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AAEA,UAAIC,eAAe,GAAG,IAAId,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACrDC,QAAAA,UAAU,CAAC,MAAM;AACfV,UAAAA,IAAI,CAACkB,MAAL;AACAV,UAAAA,OAAO,CAAC,IAAD,CAAP;AACD,SAHS,EAGP,IAHO,CAAV;AAID,OALqB,CAAtB;AAMA,UAAIc,aAAa,GAAG,MAAMD,eAA1B;AACA,aAAOC,aAAP;AACD;AA3DI,GAAP;AA6DD,CAlEM","sourcesContent":["import { async } from \"q\";\nimport { Auth } from '../utils/Auth'\nconst axios = require('axios');\n// import { }\n// const { }\n\nexport const GuacService = () => {\n  // login = (username, password) => {\n\n  // }\n\n  return {\n    getMovies: async () => {\n\n      let movies = [\n        {\n          \"name\": \"Rick & Morty S4e02: The Old Man and the Seat\"\n        },\n        {\n          \"name\": \"Rick & Morty S4e03: One Crew over the Crewcoo's Morty\"\n        }\n      ]\n      let promiseToMovies = new Promise((resolve, reject) => {\n        //TODO: put in config file\n        //\n        // axios.get(`http://www.mocky.io/v2/5dede045330000590098425b`)\n        //   .then((response: any) => {\n        //     // console.log(response.data.token);\n        //     console.log(response.data)\n        //     resolve(response.data);\n        //   })\n        //   .catch((error: any) => {\n        //     // handle error\n        //     console.log(error); //telemetry\n        //   }).finally(() => {\n        //     // resolve('cool');\n        //     resolve(m);\n        //   })\n\n        setTimeout(() => {\n          resolve(movies);\n        }, 2000)\n      });\n\n      let token = await promiseToMovies; // wait until the promise resolves (*)\n      return token;\n    },\n    login: async (username: String, password: String) => {\n      let promiseToLogin = new Promise((resolve, reject) => {\n        setTimeout(() => {\n          Auth.setAuth('sometoken')\n          resolve(true);\n        }, 3000);\n      });\n\n      let loginPromise = await promiseToLogin;\n      return loginPromise;\n    },\n\n    logout: async () => {\n      console.log('logged out clicked');\n\n      let promiseToLogout = new Promise((resolve, reject) => {\n        setTimeout(() => {\n          Auth.logout();\n          resolve(true);\n        }, 3000);\n      });\n      let logoutPromise = await promiseToLogout;\n      return logoutPromise;\n    }\n  }\n}"]},"metadata":{},"sourceType":"module"}